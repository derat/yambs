<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
    <link rel="icon" href="data:;base64,iVBORw0KGgo=" />
    <title>yambs</title>

    <!-- generic CSS -->
    <style>
      :root {
        --border-color: #ccc;
        --header-color: #eee;
        --link-color: #444;
        --margin: 8px;
      }
      body {
        font-family: Roboto, Arial, Helvetica, sans-serif;
        font-size: 14px;
      }
      h1 {
        font-size: 20px;
        margin-bottom: var(--margin);
      }
      h2 {
        font-size: 16px;
        margin-bottom: var(--margin);
      }

      .section {
        display: none;
      }
      .section.visible {
        display: block;
      }

      .button-row {
        display: flex;
        gap: var(--margin);
        margin-bottom: var(--margin);
      }

      #edit-table {
        border: solid 1px var(--border-color);
        border-collapse: collapse;
        margin-bottom: var(--margin);
      }
      #edit-table th {
        background-color: var(--header-color);
      }
      #edit-table td,
      #edit-table th {
        border: solid 1px var(--border-color);
        text-align: left;
      }
      #edit-table th:nth-child(2),
      #edit-table td:nth-child(2) {
        /* This is hacky; table layout is a disaster. */
        max-width: calc(100vw - 100px);
        overflow: hidden;
        padding: 0 var(--margin);
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      #edit-table a {
        color: var(--link-color);
        cursor: pointer;
        text-decoration: underline;
      }
      #edit-header-checkbox.partial {
        opacity: 0.4;
      }

      #edit-opening-overlay {
        align-items: center;
        backdrop-filter: blur(1px);
        background-color: #0002;
        display: none;
        font-size: 20px;
        height: 100vh;
        justify-content: center;
        left: 0;
        position: fixed;
        top: 0;
        width: 100vw;
        z-index: 1;
      }
      #edit-opening-overlay.visible {
        display: flex;
      }
    </style>
    <!-- end generic CSS -->

    {{- if not .Edits }}
    <!-- form CSS -->
    <style>
      :root {
        --form-error-bg-color: #fcc;
        --form-error-border-color: #f99;
        --form-text-fields-table-bg-color: #f5f5f5;
      }

      select {
        padding: 2px;
        margin-right: var(--margin);
      }
      input[type='text'] {
        box-sizing: border-box; /* include padding and border */
        padding: 2px 4px;
      }
      label:first-child {
        display: inline-block;
        min-width: 50px;
      }
      textarea {
        box-sizing: border-box; /* include padding and border */
        padding: 4px;
      }

      .form-row {
        margin-bottom: var(--margin);
      }
      .form-text-fields-table {
        background-color: var(--form-text-fields-table-bg-color);
        border: solid 1px var(--border-color);
        border-radius: 6px;
        display: none;
        padding: 2px;
      }
      .form-text-fields-table td:first-child {
        font-family: monospace;
        padding-right: var(--margin);
        vertical-align: top;
      }
      .form-text-fields-table.visible {
        display: table;
      }

      #form-bandcamp-url-input {
        max-width: 100%;
        width: 600px;
      }
      #form-text-fields-input {
        display: block;
        font-family: monospace;
        max-width: 100%;
        padding-top: 4px;
        width: 600px;
      }
      #form-text-set-textarea {
        display: block;
        max-width: 100%;
        height: 80px;
        width: 600px;
      }
      #form-text-input-textarea {
        display: block;
        max-width: 100%;
        height: 300px;
        width: 800px;
      }
      #form-error-div {
        background-color: var(--form-error-bg-color);
        border: solid 1px var(--form-error-border-color);
        border-radius: 6px;
        display: none;
        margin-bottom: var(--margin);
        padding: 2px 4px;
      }
      #form-error-div.visible {
        display: inline-block;
      }
    </style>
    <!-- end form CSS -->
    {{- end }}
  </head>
  <body>
    <h1>yambs (Yet Another MusicBrainz Seeder)</h1>

    {{- if not .Edits }}
    <!-- form HTML -->
    <div>
      <p>
        This is a tool for seeding
        <a href="https://musicbrainz.org/" target="_blank">MusicBrainz</a>
        edits. For more information, see the
        <a href="https://github.com/derat/yambs" target="_blank">repository</a>.
      </p>

      <div class="form-row">
        <label for="form-source-select">Source:</label>
        <select id="form-source-select">
          <option value="text">Text</option>
          <option value="bandcamp">Bandcamp</option>
        </select>
      </div>

      <div id="form-bandcamp-section" class="section">
        <div class="form-row">
          <label for="form-bandcamp-url-input">URL:</label>
          <input
            id="form-bandcamp-url-input"
            type="text"
            placeholder="https://example.bandcamp.com/album/some-album"
          />
        </div>
      </div>

      <div id="form-text-section" class="section">
        <div class="form-row">
          <label for="form-text-format-select">Format:</label>
          <select id="form-text-format-select">
            <option value="csv">CSV</option>
            <option value="tsv">TSV</option>
            <option value="keyval">key=value</option>
          </select>
          <label for="form-text-type-select">Type:</label>
          <select id="form-text-type-select">
            <option value="recording">Recording</option>
            <option value="release">Release</option>
          </select>
          <button id="form-text-toggle-fields-button">Show available fields</button>
        </div>

        <div class="form-row">
          {{- range .TypeInfo }}
          <table id="form-text-{{ .Type }}-fields-table" class="form-text-fields-table">
            {{- range .Fields }}
            <tr>
              <td>{{ .Name }}</td>
              <td>{{ .Desc }}</td>
            </tr>
            {{- end }}
          </table>
          {{- end }}
        </div>

        <!-- These inputs are only used for CSV and TSV input. -->
        <div id="form-text-csv-tsv-section" class="section">
          <div class="form-row">
            <label for="form-text-set-textarea">
              Values to set on all entities (as "field=value" lines):
            </label>
            <textarea id="form-text-set-textarea"></textarea>
          </div>
          <div class="form-row">
            <label for="form-text-fields-input">Input fields (comma-separated):</label>
            <input id="form-text-fields-input" type="text" />
          </div>
        </div>

        <div class="form-row">
          <label for="form-text-input-textarea">Input in selected format:</label>
          <textarea id="form-text-input-textarea"></textarea>
        </div>
      </div>

      <div class="button-row">
        <button id="form-generate-button">Generate edits</button>
        <button id="form-clear-button">Clear</button>
      </div>
      <div id="form-error-div"></div>
    </div>
    <!-- end form HTML -->
    {{- end }}

    <div id="edit-section" class="section">
      <h2>Seeded MusicBrainz edits</h2>
      <table id="edit-table">
        <thead>
          <tr>
            <th><input id="edit-header-checkbox" type="checkbox" /></th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="button-row">
        <button id="edit-open-all-button">Open all</button>
        <button id="edit-open-selected-button">Open selected</button>
      </div>
    </div>
    <div id="edit-opening-overlay">Opening editâ€¦</div>
  </body>

  <!-- generic JS -->
  <script>
    const $ = (id) => document.getElementById(id);

    function createElement(type, parentElement = null, className = null, text = null) {
      const element = document.createElement(type);
      if (parentElement) parentElement.appendChild(element);
      if (className) element.className = className;
      if (text || text === '') element.appendChild(document.createTextNode(text));
      return element;
    }
  </script>
  <!-- end generic JS -->

  <!-- form JS -->
  {{- if not .Edits }}
  <script>
    // This seems to confuse Prettier unless it's in its own script element.
    const formSetPlaceholders = {
      {{- range .TypeInfo}}
      {{.Type}}: {{.SetPlaceholder}},
      {{- end}}
    };
    const formFieldsPlaceholders = {
      {{- range .TypeInfo}}
      {{.Type}}: {{.FieldsPlaceholder}},
      {{- end}}
    };
    const formInputPlaceholders = {
      {{- range .TypeInfo}}
      {{.Type}}: {
        {{- range $format, $text := .InputPlaceholders}}
        {{$format}}: {{$text}},
        {{- end}}
      },
      {{- end}}
    };
  </script>
  <script>
    const formSourceSelect = $('form-source-select');
    const formBandcampUrlInput = $('form-bandcamp-url-input');
    const formTextFormatSelect = $('form-text-format-select');
    const formTextTypeSelect = $('form-text-type-select');
    const formTextCsvTsvSection = $('form-text-csv-tsv-section');
    const formTextToggleFieldsButton = $('form-text-toggle-fields-button');
    const formTextSetTextarea = $('form-text-set-textarea');
    const formTextFieldsInput = $('form-text-fields-input');
    const formTextInputTextarea = $('form-text-input-textarea');
    const formGenButton = $('form-generate-button');
    const formClearButton = $('form-clear-button');
    const formErrorDiv = $('form-error-div');
    let formTextFieldsTableShown = false;

    // Updates the state of form-related elements.
    function updateFormUI() {
      const selSource = formSourceSelect.value;
      for (const source of ['bandcamp', 'text']) {
        $(`form-${source}-section`).classList.toggle('visible', source === selSource);
      }

      const selType = formTextTypeSelect.value;
      for (const type of ['recording', 'release']) {
        const visible = formTextFieldsTableShown && type === selType;
        $(`form-text-${type}-fields-table`).classList.toggle('visible', visible);
      }
      formTextToggleFieldsButton.innerText =
        (formTextFieldsTableShown ? 'Hide' : 'Show') + ' available fields';

      const selFormat = formTextFormatSelect.value;
      formTextCsvTsvSection.classList.toggle('visible', selFormat !== 'keyval');

      formTextSetTextarea.placeholder = formSetPlaceholders[selType] || '';
      formTextFieldsInput.placeholder = formFieldsPlaceholders[selType] || '';
      formTextInputTextarea.placeholder = (formInputPlaceholders[selType] || {})[selFormat] || '';
    }

    // Clears form fields. Select elements are left unchanged.
    function clearFormFields() {
      formBandcampUrlInput.value = '';
      formTextFieldsInput.value = '';
      formTextSetTextarea.value = '';
      formTextInputTextarea.value = '';
    }

    // Displays or hides an error message.
    function showFormError(msg) {
      formErrorDiv.innerText = msg;
      formErrorDiv.classList.add('visible');
    }
    function hideFormError() {
      formErrorDiv.classList.remove('visible');
    }
    // Sends form data to the server and returns a promise for an array of objects that can be
    // passed to showEdits().
    function generateEdits() {
      const body = new FormData();
      switch (formSourceSelect.value) {
        case 'text':
          body.set('source', 'text');
          body.set('type', formTextTypeSelect.value);

          const format = formTextFormatSelect.value;
          body.set('format', format);

          // Set commands and the field list aren't used for the keyval format.
          if (['csv', 'tsv'].includes(format)) {
            // Trim whitespace at the beginning of lines and then drop empty lines.
            formTextSetTextarea.value
              .split('\n')
              .map((v) => v.trimStart())
              .filter(Boolean)
              .forEach((v) => body.append('set', v));

            const fields = formTextFieldsInput.value.trim();
            if (fields !== '') fields.split(',').forEach((v) => body.append('field', v.trim()));
          }

          // Drop input lines that are empty or only contain whitespace,
          // but preserve whitespace at the beginning or ends of lines.
          // TODO: Maybe trim whitespace at the beginning of keyval lines?
          body.set(
            'input',
            formTextInputTextarea.value
              .split('\n')
              .filter((v) => v.trim() !== '')
              .join('\n')
          );

          break;

        case 'bandcamp':
          body.set('source', 'bandcamp');
          body.set('url', formBandcampUrlInput.value.trim());
          break;
      }

      return fetch('edits', { method: 'post', body }).then((res) => {
        if (res.ok) return res.json();
        return res.text().then((text) => {
          throw new Error(text);
        });
      });
    }

    // Initialize the form.
    (() => {
      formSourceSelect.addEventListener('change', updateFormUI);
      formTextFormatSelect.addEventListener('change', updateFormUI);
      formTextTypeSelect.addEventListener('change', updateFormUI);
      updateFormUI();

      formTextToggleFieldsButton.addEventListener('click', () => {
        formTextFieldsTableShown = !formTextFieldsTableShown;
        updateFormUI();
      });

      formGenButton.addEventListener('click', () => {
        const origText = formGenButton.innerText;
        formGenButton.disabled = true;
        formGenButton.innerText = 'Generatingâ€¦';
        hideFormError();

        generateEdits()
          .then((edits) => {
            console.log(`Got ${edits.length} edit(s)`);
            showEdits(edits);
          })
          .catch((err) => {
            showFormError(err.message);
          })
          .finally(() => {
            formGenButton.disabled = false;
            formGenButton.innerText = origText;
          });
      });

      formClearButton.addEventListener('click', () => {
        clearFormFields();
        hideFormError();
        showEdits([]);
      });
    })();
  </script>
  <!-- end form JS -->
  {{- end }}

  <!-- edit JS -->
  <script>
    // This seems to confuse Prettier unless it's in its own script element.
    const initialEdits = [
      {{- range .Edits}}
      {
        desc: {{.Desc}},
        url: {{.URL}},
        params: [
          {{- range .Params}}
          {name: {{.Name}}, value: {{.Value}}},
          {{- end}}
        ],
      },
      {{- end}}
    ];
  </script>
  <script>
    const editPreselect = 5; // number of checkboxes to automatically select
    const editSection = $('edit-section');
    const editHeaderCheckbox = $('edit-header-checkbox');
    const editOpenAllButton = $('edit-open-all-button');
    const editOpenSelButton = $('edit-open-selected-button');
    const editTable = $('edit-table');
    const editCheckboxes = [];
    const editForms = []; // null for GETs
    const editLinks = [];
    let editLastClickIndex = -1; // index of last-clicked edit checkbox

    // Returns a 2-element array with the starting and ending index of the selection range.
    // If there isn't a single range, null is returned.
    function getEditSelectionRange() {
      let start = -1;
      let end = -1;
      for (const [idx, cb] of editCheckboxes.entries()) {
        if (!cb.checked) continue;
        if (start < 0) start = end = idx;
        else if (end === idx - 1) end = idx;
        else return null; // not a continuous range
      }
      return start < 0 ? null : [start, end];
    }

    // Returns the number of selected edit rows.
    const getNumSelectedEdits = () => editCheckboxes.filter((cb) => cb.checked).length;

    // If a continuous range of n rows is selected, advances the selection to the next n rows.
    function advanceEditSelection() {
      const range = getEditSelectionRange();
      if (!range || range[1] === editLinks.length - 1) return;

      const start = range[1] + 1;
      const end = start + (range[1] - range[0] + 1);
      editCheckboxes.forEach((cb, idx) => (cb.checked = idx >= start && idx <= end));
      updateEditUI();
    }

    // Updates edit header checkbox state and buttons for the currently-checked checkboxes.
    function updateEditUI() {
      editOpenAllButton.disabled = editLinks.length === 0;

      // Update the "Open selected" button's text and disabled state.
      const range = getEditSelectionRange();
      editOpenSelButton.innerText =
        range && range[1] < editLinks.length - 1 ? 'Open selected and advance' : 'Open selected';
      editOpenSelButton.disabled = getNumSelectedEdits() === 0;

      // Make the header checkbox checked if any rows are selected, and translucent if only some of
      // the rows are selected.
      const count = getNumSelectedEdits();
      editHeaderCheckbox.checked = count > 0;
      editHeaderCheckbox.classList.toggle('partial', count > 0 && count < editCheckboxes.length);
    }

    // Displays the supplied array of objects describing edits:
    // {
    //   desc: 'Human-readable description',
    //   url: 'https://www.example.org',          // includes params if GET is okay
    //   params: [{name: 'k', value: 'v1'}, ...], // if non-empty, POST is needed
    // }
    function showEdits(edits) {
      if (edits.length) {
        editSection.classList.add('visible');
        window.setTimeout(() => editSection.scrollIntoView(false /* alignToTop */));
      } else {
        editSection.classList.remove('visible');
      }

      const tbody = editTable.querySelector('tbody');
      while (tbody.firstChild) tbody.removeChild(tbody.lastChild);
      editCheckboxes.length = 0;
      editForms.length = 0;
      editLinks.length = 0;
      editLastClickIndex = -1;

      // Add a row for each edit.
      for (const [idx, edit] of edits.entries()) {
        const tr = createElement('tr', tbody);

        // Add a column containing a checkbox.
        const td1 = createElement('td', tr);
        const cb = createElement('input', td1);
        editCheckboxes.push(cb);
        cb.type = 'checkbox';
        cb.addEventListener('click', (e) => {
          // On shift-click, update the range starting at the last-clicked checkbox.
          if (e.shiftKey && editLastClickIndex >= 0 && editLastClickIndex != idx) {
            const checked = cb.checked;
            const start = Math.min(editLastClickIndex, idx);
            const end = Math.max(editLastClickIndex, idx);
            for (let i = start; i <= end; i++) editCheckboxes[i].checked = checked;
          }
          editLastClickIndex = idx;
          updateEditUI();
        });
        if (idx < editPreselect) cb.checked = true;

        // Add a second column containing a link.
        // If this edit requires a POST, also add a form.
        const td2 = createElement('td', tr);
        if (edit.params && edit.params.length) {
          const form = createElement('form', td2);
          editForms.push(form);
          form.action = edit.url;
          form.method = 'post';
          form.target = '_blank';
          for (const p of edit.params) {
            const input = createElement('input', form);
            input.type = 'hidden';
            input.name = p.name;
            input.value = p.value;
          }
        } else {
          editForms.push(null);
        }

        const link = createElement('a', td2, null, edit.desc);
        editLinks.push(link);
        if (!edit.params || !edit.params.length) link.href = edit.url;
        link.target = '_blank';
        link.addEventListener('click', (e) => {
          // If there's a form (because this edit requires a POST), submit it.
          // Otherwise, just let the link perform its default action.
          const f = editForms[idx];
          if (f) {
            f.submit();
            e.preventDefault();
          }
        });
      }

      updateEditUI();
    }

    // Initialize edit-related elements.
    (() => {
      editHeaderCheckbox.addEventListener('click', () => {
        editLastClickIndex = -1;
        const empty = getNumSelectedEdits() === 0;
        editCheckboxes.forEach((cb) => (cb.checked = empty));
        updateEditUI();
      });
      editOpenSelButton.addEventListener('click', () => {
        editLinks.filter((_, i) => editCheckboxes[i].checked).forEach((a) => a.click());
        advanceEditSelection();
      });
      editOpenAllButton.addEventListener('click', () => {
        for (const a of editLinks) a.click();
      });

      showEdits(initialEdits);
      updateEditUI();

      // If there's a single edit, just open it in the current window.
      if (editLinks.length === 1) {
        if (editForms[0]) editForms[0].target = '_self';
        editLinks[0].target = '_self';
        editLinks[0].click();
        $('edit-opening-overlay').classList.add('visible');
      }
    })();
  </script>
  <!-- end edit JS -->
</html>
